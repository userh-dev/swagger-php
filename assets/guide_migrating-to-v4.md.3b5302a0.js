import{_ as a,c as n,o as s,a as e}from"./app.2504bd8b.js";const m='{"title":"Migrating to v4","description":"","frontmatter":{},"headers":[{"level":2,"title":"Overview","slug":"overview"},{"level":2,"title":"Annotations as PHP attributes","slug":"annotations-as-php-attributes"},{"level":3,"title":"Using annotations","slug":"using-annotations"},{"level":3,"title":"Using attributes","slug":"using-attributes"},{"level":2,"title":"Optional nesting","slug":"optional-nesting"},{"level":2,"title":"Annotations must be associated with code","slug":"annotations-must-be-associated-with-code"},{"level":2,"title":"The PathParameter annotation","slug":"the-pathparameter-annotation"},{"level":2,"title":"The Attachable annotation","slug":"the-attachable-annotation"},{"level":2,"title":"Removed deprecated elements","slug":"removed-deprecated-elements"},{"level":3,"title":"\\\\Openapi\\\\Analysis::processors()","slug":"openapi-analysis-processors"},{"level":3,"title":"\\\\Openapi\\\\Analyser::$whitelist","slug":"openapi-analyser-whitelist"},{"level":3,"title":"\\\\Openapi\\\\Analyser::$defaultImports","slug":"openapi-analyser-defaultimports"},{"level":3,"title":"\\\\Openapi\\\\Logger","slug":"openapi-logger"},{"level":2,"title":"Improvements to the Generator class","slug":"improvements-to-the-generator-class"}],"relativePath":"guide/migrating-to-v4.md","lastUpdated":1643944876278}',t={},o=e(`<h1 id="migrating-to-v4" tabindex="-1">Migrating to v4 <a class="header-anchor" href="#migrating-to-v4" aria-hidden="true">#</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-hidden="true">#</a></h2><ul><li>As of PHP 8.1 annotations may be used as <a href="https://www.php.net/manual/en/language.attributes.overview.php" target="_blank" rel="noopener noreferrer">PHP attributes</a> instead. That means all references to annotations in this document also apply to attributes.</li><li>Annotations now <strong>must be</strong> associated with either a class/trait/interface, method or property.</li><li>A new annotation <code>PathParameter</code> was added for improved framework support.</li><li>A new annotation <code>Attachable</code> was added to simplify custom processing. <code>Attachable</code> can be used to attach arbitrary data to any given annotation.</li><li>Deprecated elements have been removed <ul><li><code>\\Openapi\\Analysis::processors()</code></li><li><code>\\Openapi\\Analyser::$whitelist</code></li><li><code>\\Openapi\\Analyser::$defaultImports</code></li><li><code>\\Openapi\\Logger</code></li></ul></li><li>Legacy support is available via the previous <code>TokenAnalyser</code></li><li>Improvements to the <code>Generator</code> class</li></ul><h2 id="annotations-as-php-attributes" tabindex="-1">Annotations as PHP attributes <a class="header-anchor" href="#annotations-as-php-attributes" aria-hidden="true">#</a></h2><p>While PHP attributes have been around since PHP 8.0 they were lacking the ability to be nested. This changes with PHP 8.1 which allows to use <code>new</code> in initializers.</p><p>Swagger-php attributes also make use of named arguments, so attribute parameters can be (mostly) typed. There are some limitations to type hints which can only be resolved once support for PHP 7.x is dropped.</p><h3 id="using-annotations" tabindex="-1">Using annotations <a class="header-anchor" href="#using-annotations" aria-hidden="true">#</a></h3><div class="language-php"><pre><code>
<span class="token keyword">use</span> <span class="token package">OpenApi<span class="token punctuation">\\</span>Annotations</span> <span class="token keyword">as</span> <span class="token constant">OA</span><span class="token punctuation">;</span>

<span class="token comment">/**
 * @OA\\Info(
 *   version=&quot;1.0.0&quot;,
 *   title=&quot;My API&quot;,
 *   @OA\\License(name=&quot;MIT&quot;),
 *   @OA\\Attachable()
 * )
 */</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">OpenApiSpec</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="using-attributes" tabindex="-1">Using attributes <a class="header-anchor" href="#using-attributes" aria-hidden="true">#</a></h3><div class="language-php"><pre><code>
<span class="token keyword">use</span> <span class="token package">OpenApi<span class="token punctuation">\\</span>Attributes</span> <span class="token keyword">as</span> <span class="token constant">OA</span><span class="token punctuation">;</span>

<span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">OA<span class="token punctuation">\\</span>Info</span><span class="token punctuation">(</span>
    <span class="token attribute-class-name class-name">version</span><span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;1.0.0&#39;</span><span class="token punctuation">,</span>
    <span class="token attribute-class-name class-name">title</span><span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;My API&#39;</span><span class="token punctuation">,</span>
    <span class="token attribute-class-name class-name">attachables</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token attribute-class-name class-name">new</span> <span class="token attribute-class-name class-name class-name-fully-qualified">OA<span class="token punctuation">\\</span>Attachable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span>
<span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">OA<span class="token punctuation">\\</span>License</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">name</span><span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;MIT&#39;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">OpenApiSpec</span>
<span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="optional-nesting" tabindex="-1">Optional nesting <a class="header-anchor" href="#optional-nesting" aria-hidden="true">#</a></h2><p>One of the few differences between annotations and attributes visible in the above example is that the <code>OA\\License</code> attribute is not nested within <code>OA\\Info</code>. Nesting of attributes is possible and required in certain cases however, <strong>in cases where there is no ambiguity attributes may be all written on the top level</strong> and swagger-php will do the rest.</p><h2 id="annotations-must-be-associated-with-code" tabindex="-1">Annotations must be associated with code <a class="header-anchor" href="#annotations-must-be-associated-with-code" aria-hidden="true">#</a></h2><p>The (now legacy) way of parsing PHP files meant that docblocks could live in a file without a single line of actual PHP code.</p><p>PHP Attributes cannot exist in isolation; they need code to be associated with and then are available via reflection on the associated code. In order to allow to keep supporting annotations and the code simple it made sense to treat annotations and attributes the same in this respect.</p><h2 id="the-pathparameter-annotation" tabindex="-1">The <code>PathParameter</code> annotation <a class="header-anchor" href="#the-pathparameter-annotation" aria-hidden="true">#</a></h2><p>As annotation this is just a short form for</p><div class="language-php"><pre><code>   @<span class="token constant">OA</span><span class="token function"><span class="token punctuation">\\</span>Parameter</span><span class="token punctuation">(</span>in<span class="token operator">=</span><span class="token string single-quoted-string">&#39;body&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>Things get more interesting when it comes to using it as attribute, though. In the context of a controller you can now do something like</p><div class="language-php"><pre><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">MyController</span>
<span class="token punctuation">{</span>
    <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">OA<span class="token punctuation">\\</span>Get</span><span class="token punctuation">(</span><span class="token attribute-class-name class-name">path</span><span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;/products/{product_id}&#39;</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">]</span></span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getProduct</span><span class="token punctuation">(</span>
        <span class="token attribute"><span class="token delimiter punctuation">#[</span><span class="token attribute-content"><span class="token attribute-class-name class-name class-name-fully-qualified">OA<span class="token punctuation">\\</span>PathParameter</span></span><span class="token delimiter punctuation">]</span></span> <span class="token keyword type-declaration">string</span> <span class="token variable">$product_id</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
</code></pre></div><p>Here it avoid having to duplicate details about the <code>$product_id</code> parameter and the simple use of the attribute will pick up typehints automatically.</p><h2 id="the-attachable-annotation" tabindex="-1">The <code>Attachable</code> annotation <a class="header-anchor" href="#the-attachable-annotation" aria-hidden="true">#</a></h2><p>Technically these were added in version 3.3.0, however they become really useful only with version 4.</p><p>The attachable annotation is similar to the OpenApi vendor extension <code>x=</code>. The main difference are that</p><ol><li>Attachables allow complex structures and strong typing</li><li><strong>Attachables are not added to the generated spec.</strong></li></ol><p>Their main purpose is to make customizing swagger-php easier by allowing to add arbitrary data to any annotation.</p><p>One possible use case could be custom annotations. Classes extnding <code>Attachable</code> are allowed to limit the allowed parent annotations. This means it would be easy to create a new attribute to flag certain endpoints as private and exclude them under certain conditions from the spec (via a custom processor).</p><h2 id="removed-deprecated-elements" tabindex="-1">Removed deprecated elements <a class="header-anchor" href="#removed-deprecated-elements" aria-hidden="true">#</a></h2><h3 id="openapi-analysis-processors" tabindex="-1"><code>\\Openapi\\Analysis::processors()</code> <a class="header-anchor" href="#openapi-analysis-processors" aria-hidden="true">#</a></h3><p>Processors have been moved into the <code>Generator</code> class incl. some new convenicen methods.</p><h3 id="openapi-analyser-whitelist" tabindex="-1"><code>\\Openapi\\Analyser::$whitelist</code> <a class="header-anchor" href="#openapi-analyser-whitelist" aria-hidden="true">#</a></h3><p>This has been replaced with the <code>Generator</code> <code>namespaces</code> property.</p><h3 id="openapi-analyser-defaultimports" tabindex="-1"><code>\\Openapi\\Analyser::$defaultImports</code> <a class="header-anchor" href="#openapi-analyser-defaultimports" aria-hidden="true">#</a></h3><p>This has been replaced with the <code>Generator</code> <code>aliases</code> property.</p><h3 id="openapi-logger" tabindex="-1"><code>\\Openapi\\Logger</code> <a class="header-anchor" href="#openapi-logger" aria-hidden="true">#</a></h3><p>This class has been removed completely. Instead, you may configure a <a href="https://www.php-fig.org/psr/psr-3/" target="_blank" rel="noopener noreferrer">PSR-3 logger</a>.</p><h2 id="improvements-to-the-generator-class" tabindex="-1">Improvements to the <code>Generator</code> class <a class="header-anchor" href="#improvements-to-the-generator-class" aria-hidden="true">#</a></h2><p>The removal of deprecated static config options means that the <code>Generator</code> class now is the main entry point into swagger-php when used programmatically.</p><p>To make the migration as simple as possible a new <code>Generator::withContext(callable)</code> has been added. This allows to use parts of the library (an <code>Analyser</code> instance, for example) within the context of a <code>Generator</code> instance.</p><p>Example:</p><div class="language-php"><pre><code><span class="token variable">$analyser</span> <span class="token operator">=</span> <span class="token function">createMyAnalyser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$analysis</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">addAlias</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;fo&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;My\\\\Attribute\\\\Namespace&#39;</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">addNamespace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Other\\\\Annotations\\\\&#39;</span><span class="token punctuation">)</span>
    <span class="token operator">-&gt;</span><span class="token function">withContext</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Generator</span> <span class="token variable">$generator</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Analysis</span> <span class="token variable">$analysis</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Context</span> <span class="token variable">$context</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$analyser</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$analyser</span><span class="token operator">-&gt;</span><span class="token function">setGenerator</span><span class="token punctuation">(</span><span class="token variable">$generator</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$analysis</span> <span class="token operator">=</span> <span class="token variable">$analyser</span><span class="token operator">-&gt;</span><span class="token function">fromFile</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;my_code.php&#39;</span><span class="token punctuation">,</span> <span class="token variable">$context</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$analysis</span><span class="token operator">-&gt;</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token variable">$generator</span><span class="token operator">-&gt;</span><span class="token function">getProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token variable">$analysis</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre></div>`,41),p=[o];function i(c,l,r,u,d,h){return s(),n("div",null,p)}var g=a(t,[["render",i]]);export{m as __pageData,g as default};
